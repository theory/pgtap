DROP FUNCTION has_extensions_installed( NAME, NAME[]);
DROP FUNCTION has_extensions_installed( NAME, NAME[], TEXT );
DROP FUNCTION _installed_extensions( NAME );
DROP FUNCTION server_privs_are ( NAME, NAME, NAME[] );
DROP FUNCTION server_privs_are ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _get_server_privs (NAME, TEXT);
DROP FUNCTION _get_schema_privs(NAME, TEXT);
DROP FUNCTION fdw_privs_are ( NAME, NAME, NAME[] );
DROP FUNCTION fdw_privs_are ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _get_fdw_privs (NAME, TEXT);
DROP FUNCTION column_privs_are ( NAME, NAME, NAME, NAME[] );
DROP FUNCTION column_privs_are ( NAME, NAME, NAME, NAME[], TEXT );
DROP FUNCTION column_privs_are ( NAME, NAME, NAME, NAME, NAME[] );
DROP FUNCTION column_privs_are ( NAME, NAME, NAME, NAME, NAME[], TEXT );
DROP FUNCTION _get_col_privs(NAME, TEXT, NAME);
DROP FUNCTION any_column_privs_are ( NAME, NAME, NAME[] );
DROP FUNCTION any_column_privs_are ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION any_column_privs_are ( NAME, NAME, NAME, NAME[] );
DROP FUNCTION any_column_privs_are ( NAME, NAME, NAME, NAME[], TEXT );
DROP FUNCTION _get_ac_privs(NAME, TEXT);
DROP FUNCTION sequence_privs_are ( NAME, NAME, NAME[] );
DROP FUNCTION sequence_privs_are ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION sequence_privs_are ( NAME, NAME, NAME, NAME[] );
DROP FUNCTION sequence_privs_are ( NAME, NAME, NAME, NAME[], TEXT );
DROP FUNCTION _get_sequence_privs(NAME, TEXT);
DROP FUNCTION tablespace_privs_are ( NAME, NAME, NAME[] );
DROP FUNCTION tablespace_privs_are ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _get_tablespaceprivs (NAME, TEXT);
DROP FUNCTION schema_privs_are ( NAME, NAME, NAME[] );
DROP FUNCTION schema_privs_are ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _get_schema_privs(NAME, TEXT);
DROP FUNCTION language_privs_are ( NAME, NAME, NAME[] );
DROP FUNCTION language_privs_are ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _get_lang_privs (NAME, TEXT);
DROP FUNCTION function_privs_are ( NAME, NAME[], NAME, NAME[] );
DROP FUNCTION function_privs_are ( NAME, NAME[], NAME, NAME[], TEXT );
DROP FUNCTION function_privs_are ( NAME, NAME, NAME[], NAME, NAME[] );
DROP FUNCTION function_privs_are ( NAME, NAME, NAME[], NAME, NAME[], TEXT );
DROP FUNCTION _fprivs_are ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _get_func_privs(NAME, TEXT);
DROP FUNCTION database_privs_are ( NAME, NAME, NAME[] );
DROP FUNCTION database_privs_are ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _get_db_privs(NAME, TEXT);
DROP FUNCTION _db_privs();
DROP FUNCTION table_privs_are ( NAME, NAME, NAME[] );
DROP FUNCTION table_privs_are ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION table_privs_are ( NAME, NAME, NAME, NAME[] );
DROP FUNCTION table_privs_are ( NAME, NAME, NAME, NAME[], TEXT );
DROP FUNCTION _table_privs();
DROP FUNCTION _get_table_privs(NAME, TEXT);
DROP FUNCTION _assets_are ( text, text[], text[], TEXT );
DROP FUNCTION type_owner_is ( NAME, NAME );
DROP FUNCTION type_owner_is ( NAME, NAME, TEXT );
DROP FUNCTION type_owner_is ( NAME, NAME, NAME );
DROP FUNCTION type_owner_is ( NAME, NAME, NAME, TEXT );
DROP FUNCTION _get_type_owner ( NAME );
DROP FUNCTION _get_type_owner ( NAME, NAME );
DROP FUNCTION opclass_owner_is( NAME, NAME );
DROP FUNCTION opclass_owner_is ( NAME, NAME, TEXT );
DROP FUNCTION opclass_owner_is( NAME, NAME, NAME );
DROP FUNCTION opclass_owner_is ( NAME, NAME, NAME, TEXT );
DROP FUNCTION _get_opclass_owner ( NAME );
DROP FUNCTION _get_opclass_owner ( NAME, NAME );
DROP FUNCTION language_owner_is ( NAME, NAME );
DROP FUNCTION language_owner_is ( NAME, NAME, TEXT );
DROP FUNCTION _get_language_owner( NAME );
DROP FUNCTION index_owner_is ( NAME, NAME, NAME );
DROP FUNCTION index_owner_is ( NAME, NAME, NAME, TEXT );
DROP FUNCTION index_owner_is ( NAME, NAME, NAME, NAME );
DROP FUNCTION index_owner_is ( NAME, NAME, NAME, NAME, TEXT );
DROP FUNCTION _get_index_owner( NAME, NAME );
DROP FUNCTION _get_index_owner( NAME, NAME, NAME );
DROP FUNCTION tablespace_owner_is ( NAME, NAME );
DROP FUNCTION tablespace_owner_is ( NAME, NAME, TEXT );
DROP FUNCTION _get_tablespace_owner( NAME );
DROP FUNCTION function_owner_is( NAME, NAME[], NAME );
DROP FUNCTION function_owner_is ( NAME, NAME[], NAME, TEXT );
DROP FUNCTION function_owner_is( NAME, NAME, NAME[], NAME );
DROP FUNCTION function_owner_is ( NAME, NAME, NAME[], NAME, TEXT );
DROP FUNCTION _get_func_owner ( NAME, NAME[] );
DROP FUNCTION _get_func_owner ( NAME, NAME, NAME[] );
DROP FUNCTION foreign_table_owner_is ( NAME, NAME );
DROP FUNCTION foreign_table_owner_is ( NAME, NAME, TEXT );
DROP FUNCTION foreign_table_owner_is ( NAME, NAME, NAME );
DROP FUNCTION foreign_table_owner_is ( NAME, NAME, NAME, TEXT );
DROP FUNCTION composite_owner_is ( NAME, NAME );
DROP FUNCTION composite_owner_is ( NAME, NAME, TEXT );
DROP FUNCTION composite_owner_is ( NAME, NAME, NAME );
DROP FUNCTION composite_owner_is ( NAME, NAME, NAME, TEXT );
DROP FUNCTION sequence_owner_is ( NAME, NAME );
DROP FUNCTION sequence_owner_is ( NAME, NAME, TEXT );
DROP FUNCTION sequence_owner_is ( NAME, NAME, NAME );
DROP FUNCTION sequence_owner_is ( NAME, NAME, NAME, TEXT );
DROP FUNCTION view_owner_is ( NAME, NAME );
DROP FUNCTION view_owner_is ( NAME, NAME, TEXT );
DROP FUNCTION view_owner_is ( NAME, NAME, NAME );
DROP FUNCTION view_owner_is ( NAME, NAME, NAME, TEXT );
DROP FUNCTION table_owner_is ( NAME, NAME );
DROP FUNCTION table_owner_is ( NAME, NAME, TEXT );
DROP FUNCTION table_owner_is ( NAME, NAME, NAME );
DROP FUNCTION table_owner_is ( NAME, NAME, NAME, TEXT );
DROP FUNCTION _get_rel_owner ( CHAR, NAME );
DROP FUNCTION _get_rel_owner ( CHAR, NAME, NAME );
DROP FUNCTION relation_owner_is ( NAME, NAME );
DROP FUNCTION relation_owner_is ( NAME, NAME, TEXT );
DROP FUNCTION relation_owner_is ( NAME, NAME, NAME );
DROP FUNCTION relation_owner_is ( NAME, NAME, NAME, TEXT );
DROP FUNCTION _get_rel_owner ( NAME );
DROP FUNCTION _get_rel_owner ( NAME, NAME );
DROP FUNCTION schema_owner_is ( NAME, NAME );
DROP FUNCTION schema_owner_is ( NAME, NAME, TEXT );
DROP FUNCTION _get_schema_owner( NAME );
DROP FUNCTION db_owner_is ( NAME, NAME );
DROP FUNCTION db_owner_is ( NAME, NAME, TEXT );
DROP FUNCTION _get_db_owner( NAME );
DROP FUNCTION columns_are( NAME, NAME[] );
DROP FUNCTION columns_are( NAME, NAME[], TEXT );
DROP FUNCTION columns_are( NAME, NAME, NAME[] );
DROP FUNCTION columns_are( NAME, NAME, NAME[], TEXT );
DROP FUNCTION operators_are ( TEXT[] );
DROP FUNCTION operators_are( TEXT[], TEXT );
DROP FUNCTION operators_are ( NAME, TEXT[] );
DROP FUNCTION operators_are( NAME, TEXT[], TEXT );
DROP FUNCTION display_oper ( NAME, OID );
DROP FUNCTION casts_are ( TEXT[] );
DROP FUNCTION casts_are ( TEXT[], TEXT );
DROP FUNCTION _areni ( text, text[], text[], TEXT );
DROP FUNCTION triggers_are( NAME, NAME[] );
DROP FUNCTION triggers_are( NAME, NAME[], TEXT );
DROP FUNCTION triggers_are( NAME, NAME, NAME[] );
DROP FUNCTION triggers_are( NAME, NAME, NAME[], TEXT );
DROP FUNCTION row_eq( TEXT, anyelement );
DROP FUNCTION row_eq( TEXT, anyelement, TEXT );
DROP FUNCTION domain_type_isnt( TEXT, TEXT );
DROP FUNCTION domain_type_isnt( TEXT, TEXT, TEXT );
DROP FUNCTION domain_type_isnt( NAME, TEXT, TEXT );
DROP FUNCTION domain_type_isnt( NAME, TEXT, TEXT, TEXT );
DROP FUNCTION domain_type_isnt( NAME, TEXT, NAME, TEXT );
DROP FUNCTION domain_type_isnt( NAME, TEXT, NAME, TEXT, TEXT );
DROP FUNCTION domain_type_is( TEXT, TEXT );
DROP FUNCTION domain_type_is( TEXT, TEXT, TEXT );
DROP FUNCTION domain_type_is( NAME, TEXT, TEXT );
DROP FUNCTION domain_type_is( NAME, TEXT, TEXT, TEXT );
DROP FUNCTION domain_type_is( NAME, TEXT, NAME, TEXT );
DROP FUNCTION domain_type_is( NAME, TEXT, NAME, TEXT, TEXT );
DROP FUNCTION _get_dtype( NAME );
DROP FUNCTION _get_dtype( NAME, TEXT, BOOLEAN );
DROP FUNCTION _dexists ( NAME );
DROP FUNCTION _dexists ( NAME, NAME );
DROP FUNCTION enums_are ( NAME[] );
DROP FUNCTION enums_are ( NAME[], TEXT );
DROP FUNCTION enums_are ( NAME, NAME[] );
DROP FUNCTION enums_are ( NAME, NAME[], TEXT );
DROP FUNCTION domains_are ( NAME[] );
DROP FUNCTION domains_are ( NAME[], TEXT );
DROP FUNCTION domains_are ( NAME, NAME[] );
DROP FUNCTION domains_are ( NAME, NAME[], TEXT );
DROP FUNCTION types_are ( NAME[] );
DROP FUNCTION types_are ( NAME[], TEXT );
DROP FUNCTION _types_are ( NAME[], TEXT, CHAR[] );
DROP FUNCTION types_are ( NAME, NAME[] );
DROP FUNCTION types_are ( NAME, NAME[], TEXT );
DROP FUNCTION _types_are ( NAME, NAME[], TEXT, CHAR[] );
DROP FUNCTION roles_are( NAME[] );
DROP FUNCTION roles_are( NAME[], TEXT );
DROP FUNCTION throws_imatching ( TEXT, TEXT );
DROP FUNCTION throws_imatching ( TEXT, TEXT, TEXT );
DROP FUNCTION throws_matching ( TEXT, TEXT );
DROP FUNCTION throws_matching ( TEXT, TEXT, TEXT );
DROP FUNCTION throws_ilike ( TEXT, TEXT );
DROP FUNCTION throws_ilike ( TEXT, TEXT, TEXT );
DROP FUNCTION throws_like ( TEXT, TEXT );
DROP FUNCTION throws_like ( TEXT, TEXT, TEXT );
DROP FUNCTION _tlike ( BOOLEAN, TEXT, TEXT, TEXT );
DROP FUNCTION collect_tap( VARCHAR[] );
DROP FUNCTION collect_tap( VARIADIC text[] );
DROP FUNCTION isnt_empty( TEXT );
DROP FUNCTION isnt_empty( TEXT, TEXT );
DROP FUNCTION is_empty( TEXT );
DROP FUNCTION is_empty( TEXT, TEXT );
DROP FUNCTION isa_ok( anyelement, regtype );
DROP FUNCTION isa_ok( anyelement, regtype, TEXT );
DROP FUNCTION results_ne( refcursor, anyarray );
DROP FUNCTION results_ne( refcursor, anyarray, TEXT );
DROP FUNCTION results_ne( refcursor, TEXT );
DROP FUNCTION results_ne( refcursor, TEXT, TEXT );
DROP FUNCTION results_ne( TEXT, refcursor );
DROP FUNCTION results_ne( TEXT, refcursor, TEXT );
DROP FUNCTION results_ne( TEXT, anyarray );
DROP FUNCTION results_ne( TEXT, anyarray, TEXT );
DROP FUNCTION results_ne( TEXT, TEXT );
DROP FUNCTION results_ne( TEXT, TEXT, TEXT );
DROP FUNCTION results_ne( refcursor, refcursor );
DROP FUNCTION results_ne( refcursor, refcursor, text );
DROP FUNCTION results_eq( refcursor, anyarray );
DROP FUNCTION results_eq( refcursor, anyarray, TEXT );
DROP FUNCTION results_eq( refcursor, TEXT );
DROP FUNCTION results_eq( refcursor, TEXT, TEXT );
DROP FUNCTION results_eq( TEXT, refcursor );
DROP FUNCTION results_eq( TEXT, refcursor, TEXT );
DROP FUNCTION results_eq( TEXT, anyarray );
DROP FUNCTION results_eq( TEXT, anyarray, TEXT );
DROP FUNCTION results_eq( TEXT, TEXT );
DROP FUNCTION results_eq( TEXT, TEXT, TEXT );
DROP FUNCTION results_eq( refcursor, refcursor );
DROP FUNCTION results_eq( refcursor, refcursor, text );
DROP FUNCTION bag_hasnt( TEXT, TEXT );
DROP FUNCTION bag_hasnt( TEXT, TEXT, TEXT );
DROP FUNCTION set_hasnt( TEXT, TEXT );
DROP FUNCTION set_hasnt( TEXT, TEXT, TEXT );
DROP FUNCTION bag_has( TEXT, TEXT );
DROP FUNCTION bag_has( TEXT, TEXT, TEXT );
DROP FUNCTION set_has( TEXT, TEXT );
DROP FUNCTION set_has( TEXT, TEXT, TEXT );
DROP FUNCTION _relcomp( TEXT, TEXT, TEXT, TEXT, TEXT );
DROP FUNCTION bag_ne( TEXT, anyarray );
DROP FUNCTION bag_ne( TEXT, anyarray, TEXT );
DROP FUNCTION bag_ne( TEXT, TEXT );
DROP FUNCTION bag_ne( TEXT, TEXT, TEXT );
DROP FUNCTION set_ne( TEXT, anyarray );
DROP FUNCTION set_ne( TEXT, anyarray, TEXT );
DROP FUNCTION set_ne( TEXT, TEXT );
DROP FUNCTION set_ne( TEXT, TEXT, TEXT );
DROP FUNCTION _relne( TEXT, anyarray, TEXT, TEXT );
DROP FUNCTION _relne( TEXT, TEXT, TEXT, TEXT );
DROP FUNCTION _do_ne( TEXT, TEXT, TEXT, TEXT );
DROP FUNCTION bag_eq( TEXT, anyarray );
DROP FUNCTION bag_eq( TEXT, anyarray, TEXT );
DROP FUNCTION bag_eq( TEXT, TEXT );
DROP FUNCTION bag_eq( TEXT, TEXT, TEXT );
DROP FUNCTION set_eq( TEXT, anyarray );
DROP FUNCTION set_eq( TEXT, anyarray, TEXT );
DROP FUNCTION set_eq( TEXT, TEXT );
DROP FUNCTION set_eq( TEXT, TEXT, TEXT );
DROP FUNCTION _relcomp( TEXT, anyarray, TEXT, TEXT );
DROP FUNCTION _relcomp( TEXT, TEXT, TEXT, TEXT );
DROP FUNCTION _docomp( TEXT, TEXT, TEXT, TEXT );
DROP FUNCTION _temptypes( TEXT );
DROP FUNCTION _temptable ( anyarray, TEXT );
DROP FUNCTION _temptable ( TEXT, TEXT );
DROP FUNCTION runtests( );
DROP FUNCTION runtests( TEXT );
DROP FUNCTION runtests( NAME );
DROP FUNCTION runtests( NAME, TEXT );
DROP FUNCTION _runner( text[], text[], text[], text[], text[] );
DROP FUNCTION diag_test_name(TEXT);
DROP FUNCTION _cleanup();
DROP FUNCTION _currtest();
DROP FUNCTION do_tap( );
DROP FUNCTION do_tap( text );
DROP FUNCTION do_tap( name );
DROP FUNCTION do_tap( name, text );
DROP FUNCTION _is_verbose();
DROP FUNCTION _runem( text[], boolean );
DROP FUNCTION findfuncs( TEXT );
DROP FUNCTION findfuncs( NAME, TEXT );
DROP FUNCTION check_test( TEXT, BOOLEAN );
DROP FUNCTION check_test( TEXT, BOOLEAN, TEXT );
DROP FUNCTION check_test( TEXT, BOOLEAN, TEXT, TEXT );
DROP FUNCTION check_test( TEXT, BOOLEAN, TEXT, TEXT, TEXT );
DROP FUNCTION check_test( TEXT, BOOLEAN, TEXT, TEXT, TEXT, BOOLEAN );
DROP FUNCTION volatility_is( NAME, TEXT );
DROP FUNCTION volatility_is( NAME, TEXT, TEXT );
DROP FUNCTION volatility_is( NAME, NAME[], TEXT );
DROP FUNCTION volatility_is( NAME, NAME[], TEXT, TEXT );
DROP FUNCTION volatility_is( NAME, NAME, TEXT );
DROP FUNCTION volatility_is( NAME, NAME, TEXT, TEXT );
DROP FUNCTION volatility_is( NAME, NAME, NAME[], TEXT );
DROP FUNCTION volatility_is( NAME, NAME, NAME[], TEXT, TEXT );
DROP FUNCTION _vol ( NAME );
DROP FUNCTION _vol ( NAME, NAME[] );
DROP FUNCTION _vol ( NAME, NAME );
DROP FUNCTION _vol ( NAME, NAME, NAME[] );
DROP FUNCTION _refine_vol( text );
DROP FUNCTION _expand_vol( char );
DROP FUNCTION isnt_strict( NAME );
DROP FUNCTION isnt_strict( NAME, TEXT );
DROP FUNCTION isnt_strict( NAME, NAME[] );
DROP FUNCTION isnt_strict ( NAME, NAME[], TEXT );
DROP FUNCTION isnt_strict( NAME, NAME );
DROP FUNCTION isnt_strict ( NAME, NAME, TEXT );
DROP FUNCTION isnt_strict( NAME, NAME, NAME[] );
DROP FUNCTION isnt_strict ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION is_strict( NAME );
DROP FUNCTION is_strict( NAME, TEXT );
DROP FUNCTION is_strict( NAME, NAME[] );
DROP FUNCTION is_strict ( NAME, NAME[], TEXT );
DROP FUNCTION is_strict( NAME, NAME );
DROP FUNCTION is_strict ( NAME, NAME, TEXT );
DROP FUNCTION is_strict( NAME, NAME, NAME[] );
DROP FUNCTION is_strict ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _strict ( NAME );
DROP FUNCTION _strict ( NAME, NAME[] );
DROP FUNCTION _strict ( NAME, NAME );
DROP FUNCTION _strict ( NAME, NAME, NAME[] );
DROP FUNCTION is_aggregate( NAME );
DROP FUNCTION is_aggregate( NAME, TEXT );
DROP FUNCTION is_aggregate( NAME, NAME[] );
DROP FUNCTION is_aggregate ( NAME, NAME[], TEXT );
DROP FUNCTION is_aggregate( NAME, NAME );
DROP FUNCTION is_aggregate ( NAME, NAME, TEXT );
DROP FUNCTION is_aggregate( NAME, NAME, NAME[] );
DROP FUNCTION is_aggregate ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _agg ( NAME );
DROP FUNCTION _agg ( NAME, NAME[] );
DROP FUNCTION _agg ( NAME, NAME );
DROP FUNCTION _agg ( NAME, NAME, NAME[] );
DROP FUNCTION is_definer( NAME );
DROP FUNCTION is_definer( NAME, TEXT );
DROP FUNCTION is_definer( NAME, NAME[] );
DROP FUNCTION is_definer ( NAME, NAME[], TEXT );
DROP FUNCTION is_definer( NAME, NAME );
DROP FUNCTION is_definer ( NAME, NAME, TEXT );
DROP FUNCTION is_definer( NAME, NAME, NAME[] );
DROP FUNCTION is_definer ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _definer ( NAME );
DROP FUNCTION _definer ( NAME, NAME[] );
DROP FUNCTION _definer ( NAME, NAME );
DROP FUNCTION _definer ( NAME, NAME, NAME[] );
DROP FUNCTION function_returns( NAME, TEXT );
DROP FUNCTION function_returns( NAME, TEXT, TEXT );
DROP FUNCTION function_returns( NAME, NAME[], TEXT );
DROP FUNCTION function_returns( NAME, NAME[], TEXT, TEXT );
DROP FUNCTION function_returns( NAME, NAME, TEXT );
DROP FUNCTION function_returns( NAME, NAME, TEXT, TEXT );
DROP FUNCTION function_returns( NAME, NAME, NAME[], TEXT );
DROP FUNCTION function_returns( NAME, NAME, NAME[], TEXT, TEXT );
DROP FUNCTION _returns ( NAME );
DROP FUNCTION _returns ( NAME, NAME[] );
DROP FUNCTION _returns ( NAME, NAME );
DROP FUNCTION _returns ( NAME, NAME, NAME[] );
DROP FUNCTION function_lang_is( NAME, NAME );
DROP FUNCTION function_lang_is( NAME, NAME, TEXT );
DROP FUNCTION function_lang_is( NAME, NAME[], NAME );
DROP FUNCTION function_lang_is( NAME, NAME[], NAME, TEXT );
DROP FUNCTION function_lang_is( NAME, NAME, NAME );
DROP FUNCTION function_lang_is( NAME, NAME, NAME, TEXT );
DROP FUNCTION function_lang_is( NAME, NAME, NAME[], NAME );
DROP FUNCTION function_lang_is( NAME, NAME, NAME[], NAME, TEXT );
DROP FUNCTION _lang ( NAME );
DROP FUNCTION _lang ( NAME, NAME[] );
DROP FUNCTION _lang ( NAME, NAME );
DROP FUNCTION _lang ( NAME, NAME, NAME[] );
DROP FUNCTION _func_compare( NAME, NAME, boolean, TEXT);
DROP FUNCTION _func_compare( NAME, NAME, anyelement, anyelement, TEXT);
DROP FUNCTION _func_compare( NAME, NAME, NAME[], boolean, TEXT);
DROP FUNCTION _func_compare( NAME, NAME, NAME[], anyelement, anyelement, TEXT);
DROP FUNCTION _nosuch( NAME, NAME, NAME[]);
DROP FUNCTION rule_is_on( NAME, NAME, TEXT );
DROP FUNCTION rule_is_on( NAME, NAME, TEXT, TEXT );
DROP FUNCTION rule_is_on( NAME, NAME, NAME, TEXT );
DROP FUNCTION rule_is_on( NAME, NAME, NAME, TEXT, TEXT );
DROP FUNCTION _rule_on( NAME, NAME );
DROP FUNCTION _rule_on( NAME, NAME, NAME );
DROP FUNCTION _contract_on( TEXT );
DROP FUNCTION _expand_on( char );
DROP FUNCTION rule_is_instead( NAME, NAME );
DROP FUNCTION rule_is_instead( NAME, NAME, TEXT );
DROP FUNCTION rule_is_instead( NAME, NAME, NAME );
DROP FUNCTION rule_is_instead( NAME, NAME, NAME, TEXT );
DROP FUNCTION hasnt_rule( NAME, NAME );
DROP FUNCTION hasnt_rule( NAME, NAME, TEXT );
DROP FUNCTION hasnt_rule( NAME, NAME, NAME );
DROP FUNCTION hasnt_rule( NAME, NAME, NAME, TEXT );
DROP FUNCTION has_rule( NAME, NAME );
DROP FUNCTION has_rule( NAME, NAME, TEXT );
DROP FUNCTION has_rule( NAME, NAME, NAME );
DROP FUNCTION has_rule( NAME, NAME, NAME, TEXT );
DROP FUNCTION _is_instead( NAME, NAME );
DROP FUNCTION _is_instead( NAME, NAME, NAME );
DROP FUNCTION rules_are( NAME, NAME[] );
DROP FUNCTION rules_are( NAME, NAME[], TEXT );
DROP FUNCTION rules_are( NAME, NAME, NAME[] );
DROP FUNCTION rules_are( NAME, NAME, NAME[], TEXT );
DROP FUNCTION opclasses_are ( NAME[] );
DROP FUNCTION opclasses_are ( NAME[], TEXT );
DROP FUNCTION opclasses_are ( NAME, NAME[] );
DROP FUNCTION opclasses_are ( NAME, NAME[], TEXT );
DROP FUNCTION hasnt_opclass( NAME );
DROP FUNCTION hasnt_opclass( NAME, TEXT );
DROP FUNCTION hasnt_opclass( NAME, NAME );
DROP FUNCTION hasnt_opclass( NAME, NAME, TEXT );
DROP FUNCTION has_opclass( NAME );
DROP FUNCTION has_opclass( NAME, TEXT );
DROP FUNCTION has_opclass( NAME, NAME );
DROP FUNCTION has_opclass( NAME, NAME, TEXT );
DROP FUNCTION _opc_exists( NAME );
DROP FUNCTION _opc_exists( NAME, NAME );
DROP FUNCTION language_is_trusted( NAME );
DROP FUNCTION language_is_trusted( NAME, TEXT );
DROP FUNCTION hasnt_language( NAME );
DROP FUNCTION hasnt_language( NAME, TEXT );
DROP FUNCTION has_language( NAME );
DROP FUNCTION has_language( NAME, TEXT );
DROP FUNCTION _is_trusted( NAME );
DROP FUNCTION languages_are( NAME[] );
DROP FUNCTION languages_are( NAME[], TEXT );
DROP FUNCTION groups_are( NAME[] );
DROP FUNCTION groups_are( NAME[], TEXT );
DROP FUNCTION users_are( NAME[] );
DROP FUNCTION users_are( NAME[], TEXT );
DROP FUNCTION indexes_are( NAME, NAME[] );
DROP FUNCTION indexes_are( NAME, NAME[], TEXT );
DROP FUNCTION indexes_are( NAME, NAME, NAME[] );
DROP FUNCTION indexes_are( NAME, NAME, NAME[], TEXT );
DROP FUNCTION functions_are ( NAME[] );
DROP FUNCTION functions_are ( NAME[], TEXT );
DROP FUNCTION functions_are ( NAME, NAME[] );
DROP FUNCTION functions_are ( NAME, NAME[], TEXT );
DROP FUNCTION sequences_are ( NAME[] );
DROP FUNCTION sequences_are ( NAME, NAME[] );
DROP FUNCTION sequences_are ( NAME[], TEXT );
DROP FUNCTION sequences_are ( NAME, NAME[], TEXT );
DROP FUNCTION views_are ( NAME[] );
DROP FUNCTION views_are ( NAME, NAME[] );
DROP FUNCTION views_are ( NAME[], TEXT );
DROP FUNCTION views_are ( NAME, NAME[], TEXT );
DROP FUNCTION tables_are ( NAME[] );
DROP FUNCTION tables_are ( NAME, NAME[] );
DROP FUNCTION tables_are ( NAME[], TEXT );
DROP FUNCTION tables_are ( NAME, NAME[], TEXT );
DROP FUNCTION _missing ( CHAR, NAME[] );
DROP FUNCTION _missing ( CHAR, NAME, NAME[] );
DROP FUNCTION _extras ( CHAR, NAME[] );
DROP FUNCTION _extras ( CHAR, NAME, NAME[] );
DROP FUNCTION schemas_are ( NAME[] );
DROP FUNCTION schemas_are ( NAME[], TEXT );
DROP FUNCTION tablespaces_are ( NAME[] );
DROP FUNCTION tablespaces_are ( NAME[], TEXT );
DROP FUNCTION _are ( text, name[], name[], TEXT );
DROP FUNCTION has_rightop ( NAME, NAME );
DROP FUNCTION has_rightop ( NAME, NAME, TEXT );
DROP FUNCTION has_rightop ( NAME, NAME, NAME );
DROP FUNCTION has_rightop ( NAME, NAME, NAME, TEXT );
DROP FUNCTION has_rightop ( NAME, NAME, NAME, NAME );
DROP FUNCTION has_rightop ( NAME, NAME, NAME, NAME, TEXT );
DROP FUNCTION has_leftop ( NAME, NAME );
DROP FUNCTION has_leftop ( NAME, NAME, TEXT );
DROP FUNCTION has_leftop ( NAME, NAME, NAME );
DROP FUNCTION has_leftop ( NAME, NAME, NAME, TEXT );
DROP FUNCTION has_leftop ( NAME, NAME, NAME, NAME );
DROP FUNCTION has_leftop ( NAME, NAME, NAME, NAME, TEXT );
DROP FUNCTION has_operator ( NAME, NAME, NAME );
DROP FUNCTION has_operator ( NAME, NAME, NAME, TEXT );
DROP FUNCTION has_operator ( NAME, NAME, NAME, NAME );
DROP FUNCTION has_operator ( NAME, NAME, NAME, NAME, TEXT );
DROP FUNCTION has_operator ( NAME, NAME, NAME, NAME, NAME );
DROP FUNCTION has_operator ( NAME, NAME, NAME, NAME, NAME, TEXT );
DROP FUNCTION _op_exists ( NAME, NAME, NAME );
DROP FUNCTION _op_exists ( NAME, NAME, NAME, NAME );
DROP FUNCTION _op_exists ( NAME, NAME, NAME, NAME, NAME );
DROP FUNCTION cast_context_is( NAME, NAME, TEXT );
DROP FUNCTION cast_context_is( NAME, NAME, TEXT, TEXT );
DROP FUNCTION _get_context( NAME, NAME );
DROP FUNCTION _expand_context( char );
DROP FUNCTION hasnt_cast ( NAME, NAME );
DROP FUNCTION hasnt_cast ( NAME, NAME, TEXT );
DROP FUNCTION hasnt_cast ( NAME, NAME, NAME );
DROP FUNCTION hasnt_cast ( NAME, NAME, NAME, TEXT );
DROP FUNCTION hasnt_cast ( NAME, NAME, NAME, NAME );
DROP FUNCTION hasnt_cast ( NAME, NAME, NAME, NAME, TEXT );
DROP FUNCTION has_cast ( NAME, NAME );
DROP FUNCTION has_cast ( NAME, NAME, TEXT );
DROP FUNCTION has_cast ( NAME, NAME, NAME );
DROP FUNCTION has_cast ( NAME, NAME, NAME, TEXT );
DROP FUNCTION has_cast ( NAME, NAME, NAME, NAME );
DROP FUNCTION has_cast ( NAME, NAME, NAME, NAME, TEXT );
DROP FUNCTION _cast_exists ( NAME, NAME );
DROP FUNCTION _cast_exists ( NAME, NAME, NAME );
DROP FUNCTION _cast_exists ( NAME, NAME, NAME, NAME );
DROP FUNCTION _cmp_types(oid, name);
DROP FUNCTION is_member_of( NAME, NAME );
DROP FUNCTION is_member_of( NAME, NAME[] );
DROP FUNCTION is_member_of( NAME, NAME, TEXT );
DROP FUNCTION is_member_of( NAME, NAME[], TEXT );
DROP FUNCTION _grolist ( NAME );
DROP FUNCTION hasnt_group( NAME );
DROP FUNCTION hasnt_group( NAME, TEXT );
DROP FUNCTION has_group( NAME );
DROP FUNCTION has_group( NAME, TEXT );
DROP FUNCTION _has_group( NAME );
DROP FUNCTION isnt_superuser( NAME );
DROP FUNCTION isnt_superuser( NAME, TEXT );
DROP FUNCTION is_superuser( NAME );
DROP FUNCTION is_superuser( NAME, TEXT );
DROP FUNCTION _is_super( NAME );
DROP FUNCTION hasnt_user( NAME );
DROP FUNCTION hasnt_user( NAME, TEXT );
DROP FUNCTION has_user( NAME );
DROP FUNCTION has_user( NAME, TEXT );
DROP FUNCTION _has_user( NAME );
DROP FUNCTION hasnt_role( NAME );
DROP FUNCTION hasnt_role( NAME, TEXT );
DROP FUNCTION has_role( NAME );
DROP FUNCTION has_role( NAME, TEXT );
DROP FUNCTION _has_role( NAME );
DROP FUNCTION enum_has_labels( NAME, NAME[] );
DROP FUNCTION enum_has_labels( NAME, NAME[], TEXT );
DROP FUNCTION enum_has_labels( NAME, NAME, NAME[] );
DROP FUNCTION enum_has_labels( NAME, NAME, NAME[], TEXT );
DROP FUNCTION hasnt_enum( NAME );
DROP FUNCTION hasnt_enum( NAME, TEXT );
DROP FUNCTION hasnt_enum( NAME, NAME );
DROP FUNCTION hasnt_enum( NAME, NAME, TEXT );
DROP FUNCTION has_enum( NAME );
DROP FUNCTION has_enum( NAME, TEXT );
DROP FUNCTION has_enum( NAME, NAME );
DROP FUNCTION has_enum( NAME, NAME, TEXT );
DROP FUNCTION hasnt_domain( NAME );
DROP FUNCTION hasnt_domain( NAME, TEXT );
DROP FUNCTION hasnt_domain( NAME, NAME );
DROP FUNCTION hasnt_domain( NAME, NAME, TEXT );
DROP FUNCTION has_domain( NAME );
DROP FUNCTION has_domain( NAME, TEXT );
DROP FUNCTION has_domain( NAME, NAME );
DROP FUNCTION has_domain( NAME, NAME, TEXT );
DROP FUNCTION hasnt_type( NAME );
DROP FUNCTION hasnt_type( NAME, TEXT );
DROP FUNCTION hasnt_type( NAME, NAME );
DROP FUNCTION hasnt_type( NAME, NAME, TEXT );
DROP FUNCTION has_type( NAME );
DROP FUNCTION has_type( NAME, TEXT );
DROP FUNCTION has_type( NAME, NAME );
DROP FUNCTION has_type( NAME, NAME, TEXT );
DROP FUNCTION _has_type( NAME, CHAR[] );
DROP FUNCTION _has_type( NAME, NAME, CHAR[] );
DROP FUNCTION hasnt_tablespace( NAME );
DROP FUNCTION hasnt_tablespace( NAME, TEXT );
DROP FUNCTION has_tablespace( NAME );
DROP FUNCTION has_tablespace( NAME, TEXT );
DROP FUNCTION has_tablespace( NAME, TEXT, TEXT );
DROP FUNCTION hasnt_schema( NAME );
DROP FUNCTION hasnt_schema( NAME, TEXT );
DROP FUNCTION has_schema( NAME );
DROP FUNCTION has_schema( NAME, TEXT );
DROP FUNCTION trigger_is ( NAME, NAME, NAME );
DROP FUNCTION trigger_is ( NAME, NAME, NAME, text );
DROP FUNCTION trigger_is ( NAME, NAME, NAME, NAME, NAME );
DROP FUNCTION trigger_is ( NAME, NAME, NAME, NAME, NAME, text );
DROP FUNCTION hasnt_trigger ( NAME, NAME );
DROP FUNCTION hasnt_trigger ( NAME, NAME, TEXT );
DROP FUNCTION hasnt_trigger ( NAME, NAME, NAME );
DROP FUNCTION hasnt_trigger ( NAME, NAME, NAME, TEXT );
DROP FUNCTION has_trigger ( NAME, NAME );
DROP FUNCTION has_trigger ( NAME, NAME, TEXT );
DROP FUNCTION has_trigger ( NAME, NAME, NAME );
DROP FUNCTION has_trigger ( NAME, NAME, NAME, TEXT );
DROP FUNCTION _trig ( NAME, NAME );
DROP FUNCTION _trig ( NAME, NAME, NAME );
DROP FUNCTION index_is_type ( NAME, NAME );
DROP FUNCTION index_is_type ( NAME, NAME, NAME );
DROP FUNCTION index_is_type ( NAME, NAME, NAME, NAME );
DROP FUNCTION index_is_type ( NAME, NAME, NAME, NAME, text );
DROP FUNCTION is_clustered ( NAME );
DROP FUNCTION is_clustered ( NAME, NAME );
DROP FUNCTION is_clustered ( NAME, NAME, NAME );
DROP FUNCTION is_clustered ( NAME, NAME, NAME, text );
DROP FUNCTION index_is_primary ( NAME );
DROP FUNCTION index_is_primary ( NAME, NAME );
DROP FUNCTION index_is_primary ( NAME, NAME, NAME );
DROP FUNCTION index_is_primary ( NAME, NAME, NAME, text );
DROP FUNCTION index_is_unique ( NAME );
DROP FUNCTION index_is_unique ( NAME, NAME );
DROP FUNCTION index_is_unique ( NAME, NAME, NAME );
DROP FUNCTION index_is_unique ( NAME, NAME, NAME, text );
DROP FUNCTION hasnt_index ( NAME, NAME );
DROP FUNCTION hasnt_index ( NAME, NAME, TEXT );
DROP FUNCTION hasnt_index ( NAME, NAME, NAME );
DROP FUNCTION hasnt_index ( NAME, NAME, NAME, TEXT );
DROP FUNCTION has_index ( NAME, NAME );
DROP FUNCTION has_index ( NAME, NAME, text );
DROP FUNCTION has_index ( NAME, NAME, NAME );
DROP FUNCTION has_index ( NAME, NAME, NAME, text );
DROP FUNCTION _is_schema( NAME );
DROP FUNCTION has_index ( NAME, NAME, NAME[] );
DROP FUNCTION has_index ( NAME, NAME, NAME[], text );
DROP FUNCTION has_index ( NAME, NAME, NAME, NAME );
DROP FUNCTION has_index ( NAME, NAME, NAME, NAME, text );
DROP FUNCTION has_index ( NAME, NAME, NAME, NAME[] );
DROP FUNCTION has_index ( NAME, NAME, NAME, NAME[], text );
DROP FUNCTION _have_index( NAME, NAME);
DROP FUNCTION _have_index( NAME, NAME, NAME);
DROP FUNCTION _ikeys( NAME, NAME);
DROP FUNCTION _ikeys( NAME, NAME, NAME);
DROP FUNCTION can ( NAME[] );
DROP FUNCTION can ( NAME[], TEXT );
DROP FUNCTION can ( NAME, NAME[] );
DROP FUNCTION can ( NAME, NAME[], TEXT );
DROP FUNCTION _pg_sv_type_array( OID[] );
DROP FUNCTION hasnt_function( NAME );
DROP FUNCTION hasnt_function( NAME, TEXT );
DROP FUNCTION hasnt_function( NAME, NAME[] );
DROP FUNCTION hasnt_function ( NAME, NAME[], TEXT );
DROP FUNCTION hasnt_function( NAME, NAME );
DROP FUNCTION hasnt_function ( NAME, NAME, TEXT );
DROP FUNCTION hasnt_function( NAME, NAME, NAME[] );
DROP FUNCTION hasnt_function ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION has_function( NAME );
DROP FUNCTION has_function( NAME, TEXT );
DROP FUNCTION has_function( NAME, NAME[] );
DROP FUNCTION has_function ( NAME, NAME[], TEXT );
DROP FUNCTION has_function( NAME, NAME );
DROP FUNCTION has_function ( NAME, NAME, TEXT );
DROP FUNCTION has_function( NAME, NAME, NAME[] );
DROP FUNCTION has_function ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _got_func ( NAME );
DROP FUNCTION _got_func ( NAME, NAME[] );
DROP FUNCTION _got_func ( NAME, NAME );
DROP FUNCTION _got_func ( NAME, NAME, NAME[] );
DROP VIEW tap_funky;
DROP FUNCTION fk_ok ( NAME, NAME, NAME, NAME );
DROP FUNCTION fk_ok ( NAME, NAME, NAME, NAME, TEXT );
DROP FUNCTION fk_ok ( NAME, NAME, NAME, NAME, NAME, TEXT );
DROP FUNCTION fk_ok ( NAME, NAME, NAME, NAME, NAME, NAME, TEXT );
DROP FUNCTION fk_ok ( NAME, NAME[], NAME, NAME[] );
DROP FUNCTION fk_ok ( NAME, NAME, NAME[], NAME, NAME, NAME[] );
DROP FUNCTION fk_ok ( NAME, NAME[], NAME, NAME[], TEXT );
DROP FUNCTION fk_ok ( NAME, NAME, NAME[], NAME, NAME, NAME[], TEXT );
DROP FUNCTION col_has_check ( NAME, NAME );
DROP FUNCTION col_has_check ( NAME, NAME, TEXT );
DROP FUNCTION col_has_check ( NAME, NAME, NAME, TEXT );
DROP FUNCTION col_has_check ( NAME, NAME[] );
DROP FUNCTION col_has_check ( NAME, NAME[], TEXT );
DROP FUNCTION col_has_check ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION has_check ( NAME );
DROP FUNCTION has_check ( NAME, TEXT );
DROP FUNCTION has_check ( NAME, NAME, TEXT );
DROP FUNCTION col_is_unique ( NAME, NAME );
DROP FUNCTION col_is_unique ( NAME, NAME, TEXT );
DROP FUNCTION col_is_unique ( NAME, NAME, NAME, TEXT );
DROP FUNCTION col_is_unique ( NAME, NAME[] );
DROP FUNCTION col_is_unique ( NAME, NAME[], TEXT );
DROP FUNCTION col_is_unique ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _constraint ( NAME, CHAR, NAME[], TEXT, TEXT );
DROP FUNCTION _constraint ( NAME, NAME, CHAR, NAME[], TEXT, TEXT );
DROP FUNCTION has_unique ( TEXT );
DROP FUNCTION has_unique ( TEXT, TEXT );
DROP FUNCTION has_unique ( TEXT, TEXT, TEXT );
DROP FUNCTION col_isnt_fk ( NAME, NAME );
DROP FUNCTION col_isnt_fk ( NAME, NAME, TEXT );
DROP FUNCTION col_isnt_fk ( NAME, NAME, NAME, TEXT );
DROP FUNCTION col_isnt_fk ( NAME, NAME[] );
DROP FUNCTION col_isnt_fk ( NAME, NAME[], TEXT );
DROP FUNCTION col_isnt_fk ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION col_is_fk ( NAME, NAME );
DROP FUNCTION col_is_fk ( NAME, NAME, TEXT );
DROP FUNCTION col_is_fk ( NAME, NAME, NAME, TEXT );
DROP FUNCTION col_is_fk ( NAME, NAME[] );
DROP FUNCTION col_is_fk ( NAME, NAME[], TEXT );
DROP FUNCTION col_is_fk ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _fkexists ( NAME, NAME[] );
DROP FUNCTION _fkexists ( NAME, NAME, NAME[] );
DROP FUNCTION hasnt_fk ( NAME );
DROP FUNCTION hasnt_fk ( NAME, TEXT );
DROP FUNCTION hasnt_fk ( NAME, NAME, TEXT );
DROP FUNCTION has_fk ( NAME );
DROP FUNCTION has_fk ( NAME, TEXT );
DROP FUNCTION has_fk ( NAME, NAME, TEXT );
DROP FUNCTION col_isnt_pk ( NAME, NAME );
DROP FUNCTION col_isnt_pk ( NAME, NAME, TEXT );
DROP FUNCTION col_isnt_pk ( NAME, NAME, NAME, TEXT );
DROP FUNCTION col_isnt_pk ( NAME, NAME[] );
DROP FUNCTION col_isnt_pk ( NAME, NAME[], TEXT );
DROP FUNCTION col_isnt_pk ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION col_is_pk ( NAME, NAME );
DROP FUNCTION col_is_pk ( NAME, NAME, TEXT );
DROP FUNCTION col_is_pk ( NAME, NAME, NAME, TEXT );
DROP FUNCTION col_is_pk ( NAME, NAME[] );
DROP FUNCTION col_is_pk ( NAME, NAME[], TEXT );
DROP FUNCTION col_is_pk ( NAME, NAME, NAME[], TEXT );
DROP FUNCTION _ckeys ( NAME, CHAR );
DROP FUNCTION _ckeys ( NAME, NAME, CHAR );
DROP FUNCTION _keys ( NAME, CHAR );
DROP FUNCTION _keys ( NAME, NAME, CHAR );
DROP VIEW pg_all_foreign_keys;
DROP FUNCTION _pg_sv_table_accessible( OID, OID );
DROP FUNCTION _pg_sv_column_array( OID, SMALLINT[] );
DROP FUNCTION _ident_array_to_string( name[], text );
DROP FUNCTION hasnt_pk ( NAME );
DROP FUNCTION hasnt_pk ( NAME, TEXT );
DROP FUNCTION hasnt_pk ( NAME, NAME, TEXT );
DROP FUNCTION has_pk ( NAME );
DROP FUNCTION has_pk ( NAME, TEXT );
DROP FUNCTION has_pk ( NAME, NAME, TEXT );
DROP FUNCTION _hasc ( NAME, CHAR );
DROP FUNCTION _hasc ( NAME, NAME, CHAR );
DROP FUNCTION col_default_is ( NAME, NAME, text );
DROP FUNCTION col_default_is ( NAME, NAME, anyelement );
DROP FUNCTION col_default_is ( NAME, NAME, TEXT, TEXT );
DROP FUNCTION col_default_is ( NAME, NAME, anyelement, TEXT );
DROP FUNCTION col_default_is ( NAME, NAME, NAME, TEXT, TEXT );
DROP FUNCTION col_default_is ( NAME, NAME, NAME, anyelement, TEXT );
DROP FUNCTION _cdi ( NAME, NAME, anyelement );
DROP FUNCTION _cdi ( NAME, NAME, anyelement, TEXT );
DROP FUNCTION _cdi ( NAME, NAME, NAME, anyelement, TEXT );
DROP FUNCTION _def_is( TEXT, TEXT, anyelement, TEXT );
DROP FUNCTION col_hasnt_default ( NAME, NAME );
DROP FUNCTION col_hasnt_default ( NAME, NAME, TEXT );
DROP FUNCTION col_hasnt_default ( NAME, NAME, NAME, TEXT );
DROP FUNCTION col_has_default ( NAME, NAME );
DROP FUNCTION col_has_default ( NAME, NAME, TEXT );
DROP FUNCTION col_has_default ( NAME, NAME, NAME, TEXT );
DROP FUNCTION _has_def ( NAME, NAME );
DROP FUNCTION _has_def ( NAME, NAME, NAME );
DROP FUNCTION col_type_is ( NAME, NAME, TEXT );
DROP FUNCTION col_type_is ( NAME, NAME, TEXT, TEXT );
DROP FUNCTION col_type_is ( NAME, NAME, NAME, TEXT );
DROP FUNCTION col_type_is ( NAME, NAME, NAME, TEXT, TEXT );
DROP FUNCTION col_type_is ( NAME, NAME, NAME, NAME, TEXT );
DROP FUNCTION col_type_is ( NAME, NAME, NAME, NAME, TEXT, TEXT );
DROP FUNCTION _quote_ident_like(TEXT, TEXT);
DROP FUNCTION _get_col_ns_type ( NAME, NAME, NAME );
DROP FUNCTION _get_col_type ( NAME, NAME );
DROP FUNCTION _get_col_type ( NAME, NAME, NAME );
DROP FUNCTION col_is_null ( NAME, NAME );
DROP FUNCTION col_is_null ( NAME, NAME, NAME );
DROP FUNCTION col_is_null ( NAME, NAME, NAME, TEXT );
DROP FUNCTION col_not_null ( NAME, NAME );
DROP FUNCTION col_not_null ( NAME, NAME, TEXT );
DROP FUNCTION col_not_null ( NAME, NAME, NAME, TEXT );
DROP FUNCTION _col_is_null ( NAME, NAME, TEXT, bool );
DROP FUNCTION _col_is_null ( NAME, NAME, NAME, TEXT, bool );
DROP FUNCTION hasnt_column ( NAME, NAME );
DROP FUNCTION hasnt_column ( NAME, NAME, TEXT );
DROP FUNCTION hasnt_column ( NAME, NAME, NAME, TEXT );
DROP FUNCTION has_column ( NAME, NAME );
DROP FUNCTION has_column ( NAME, NAME, TEXT );
DROP FUNCTION has_column ( NAME, NAME, NAME, TEXT );
DROP FUNCTION _cexists ( NAME, NAME );
DROP FUNCTION _cexists ( NAME, NAME, NAME );
DROP FUNCTION hasnt_composite ( NAME );
DROP FUNCTION hasnt_composite ( NAME, TEXT );
DROP FUNCTION hasnt_composite ( NAME, NAME, TEXT );
DROP FUNCTION has_composite ( NAME );
DROP FUNCTION has_composite ( NAME, TEXT );
DROP FUNCTION has_composite ( NAME, NAME, TEXT );
DROP FUNCTION hasnt_foreign_table ( NAME );
DROP FUNCTION hasnt_foreign_table ( NAME, TEXT );
DROP FUNCTION hasnt_foreign_table ( NAME, NAME, TEXT );
DROP FUNCTION has_foreign_table ( NAME );
DROP FUNCTION has_foreign_table ( NAME, TEXT );
DROP FUNCTION has_foreign_table ( NAME, NAME, TEXT );
DROP FUNCTION hasnt_sequence ( NAME );
DROP FUNCTION hasnt_sequence ( NAME, TEXT );
DROP FUNCTION hasnt_sequence ( NAME, NAME, TEXT );
DROP FUNCTION has_sequence ( NAME );
DROP FUNCTION has_sequence ( NAME, TEXT );
DROP FUNCTION has_sequence ( NAME, NAME, TEXT );
DROP FUNCTION hasnt_view ( NAME );
DROP FUNCTION hasnt_view ( NAME, TEXT );
DROP FUNCTION hasnt_view ( NAME, NAME, TEXT );
DROP FUNCTION has_view ( NAME );
DROP FUNCTION has_view ( NAME, TEXT );
DROP FUNCTION has_view ( NAME, NAME, TEXT );
DROP FUNCTION hasnt_table ( NAME );
DROP FUNCTION hasnt_table ( NAME, TEXT );
DROP FUNCTION hasnt_table ( NAME, NAME, TEXT );
DROP FUNCTION has_table ( NAME );
DROP FUNCTION has_table ( NAME, TEXT );
DROP FUNCTION has_table ( NAME, NAME, TEXT );
DROP FUNCTION _rexists ( CHAR, NAME );
DROP FUNCTION _rexists ( CHAR, NAME, NAME );
DROP FUNCTION hasnt_relation ( NAME );
DROP FUNCTION hasnt_relation ( NAME, TEXT );
DROP FUNCTION hasnt_relation ( NAME, NAME, TEXT );
DROP FUNCTION has_relation ( NAME );
DROP FUNCTION has_relation ( NAME, TEXT );
DROP FUNCTION has_relation ( NAME, NAME, TEXT );
DROP FUNCTION _relexists ( NAME );
DROP FUNCTION _relexists ( NAME, NAME );
DROP FUNCTION performs_ok ( TEXT, NUMERIC );
DROP FUNCTION performs_ok ( TEXT, NUMERIC, TEXT );
DROP FUNCTION performs_within ( TEXT, NUMERIC, NUMERIC, INT, TEXT );
DROP FUNCTION performs_within ( TEXT, NUMERIC, NUMERIC, TEXT );
DROP FUNCTION performs_within ( TEXT, NUMERIC, NUMERIC, INT );
DROP FUNCTION performs_within ( TEXT, NUMERIC, NUMERIC );
DROP FUNCTION _time_trials( TEXT, INT, NUMERIC );
DROP FUNCTION lives_ok ( TEXT );
DROP FUNCTION lives_ok ( TEXT, TEXT );
DROP FUNCTION throws_ok ( TEXT, int4 );
DROP FUNCTION throws_ok ( TEXT, int4, TEXT );
DROP FUNCTION throws_ok ( TEXT, int4, TEXT, TEXT );
DROP FUNCTION throws_ok ( TEXT );
DROP FUNCTION throws_ok ( TEXT, TEXT );
DROP FUNCTION throws_ok ( TEXT, TEXT, TEXT );
DROP FUNCTION throws_ok ( TEXT, CHAR(5), TEXT, TEXT );
DROP FUNCTION _query( TEXT );
DROP FUNCTION skip( int );
DROP FUNCTION skip( int, text );
DROP FUNCTION skip ( text );
DROP FUNCTION skip ( why text, how_many int );
DROP FUNCTION _todo();
DROP FUNCTION todo_end ();
DROP FUNCTION in_todo ();
DROP FUNCTION todo_start ();
DROP FUNCTION todo_start (text);
DROP FUNCTION todo ( how_many int );
DROP FUNCTION todo ( why text );
DROP FUNCTION todo ( how_many int, why text );
DROP FUNCTION todo ( why text, how_many int );
DROP FUNCTION fail ();
DROP FUNCTION fail ( text );
DROP FUNCTION pass ();
DROP FUNCTION pass ( text );
DROP FUNCTION cmp_ok (anyelement, text, anyelement);
DROP FUNCTION cmp_ok (anyelement, text, anyelement, text);
DROP FUNCTION unialike ( anyelement, text );
DROP FUNCTION unialike ( anyelement, text, text );
DROP FUNCTION unalike ( anyelement, text );
DROP FUNCTION unalike ( anyelement, text, text );
DROP FUNCTION doesnt_imatch ( anyelement, text );
DROP FUNCTION doesnt_imatch ( anyelement, text, text );
DROP FUNCTION doesnt_match ( anyelement, text );
DROP FUNCTION doesnt_match ( anyelement, text, text );
DROP FUNCTION _unalike ( BOOLEAN, ANYELEMENT, TEXT, TEXT );
DROP FUNCTION ialike ( anyelement, text );
DROP FUNCTION ialike ( anyelement, text, text );
DROP FUNCTION alike ( anyelement, text );
DROP FUNCTION alike ( anyelement, text, text );
DROP FUNCTION imatches ( anyelement, text );
DROP FUNCTION imatches ( anyelement, text, text );
DROP FUNCTION matches ( anyelement, text );
DROP FUNCTION matches ( anyelement, text, text );
DROP FUNCTION _alike ( BOOLEAN, ANYELEMENT, TEXT, TEXT );
DROP FUNCTION isnt (anyelement, anyelement);
DROP FUNCTION isnt (anyelement, anyelement, text);
DROP FUNCTION is (anyelement, anyelement);
DROP FUNCTION is (anyelement, anyelement, text);
DROP FUNCTION ok ( boolean );
DROP FUNCTION ok ( boolean, text );
DROP FUNCTION diag( VARIADIC anyarray );
DROP FUNCTION diag( VARIADIC text[] );
DROP FUNCTION diag ( msg anyelement );
DROP FUNCTION diag ( msg text );
DROP FUNCTION finish ();
DROP FUNCTION _finish ( INTEGER, INTEGER, INTEGER);
DROP FUNCTION num_failed ();
DROP FUNCTION add_result ( bool, bool, text, text, text );
DROP FUNCTION _add ( text, integer );
DROP FUNCTION _add ( text, integer, text );
DROP FUNCTION _set ( integer, integer );
DROP FUNCTION _set ( text, integer );
DROP FUNCTION _set ( text, integer, text );
DROP FUNCTION _get_note ( integer );
DROP FUNCTION _get_note ( text );
DROP FUNCTION _get_latest ( text, integer );
DROP FUNCTION _get_latest ( text );
DROP FUNCTION _get ( text );
DROP FUNCTION no_plan();
DROP FUNCTION plan( integer );
DROP FUNCTION pgtap_version();
DROP FUNCTION os_name();
DROP FUNCTION pg_version_num();
DROP FUNCTION pg_version();
