\unset ECHO
ok 1 - starting up
ok 2 - starting up some more
    # Subtest: whatever."test ident"()
    ok 1 - setup
    ok 2 - Should be nothing in the test table
    ok 3 - setup more
    ok 4 - ident
    ok 5 - ident 2
    ok 6 - teardown
    ok 7 - teardown more
    1..7
ok 3 - whatever."test ident"
    # Subtest: whatever.testplpgsql()
    ok 1 - setup
    ok 2 - Should be nothing in the test table
    ok 3 - setup more
    ok 4 - plpgsql simple
    ok 5 - plpgsql simple 2
    ok 6 - Should be a 1 in the test table
    ok 7 - teardown
    ok 8 - teardown more
    1..8
ok 4 - whatever.testplpgsql
    # Subtest: whatever.testplpgsqldie()
    ok 1 - setup
    ok 2 - Should be nothing in the test table
    ok 3 - setup more
    # Test died: P0001: This test should die, but not halt execution.
    # Note that in some cases we get what appears to be a duplicate context message, but that is due to Postgres itself.
    #         DETAIL:     DETAIL
    #         SCHEMA:     SCHEMA
    #         TABLE:      TABLE
    #         COLUMN:     COLUMN
    #         CONSTRAINT: CONSTRAINT
    #         TYPE:       TYPE
    #         CONTEXT:
    #             PL/pgSQL function __die() line 3 at RAISE
    #             SQL statement "SELECT __die();"
    #             PL/pgSQL function whatever.testplpgsqldie() line 23 at EXECUTE
    #             PL/pgSQL function _runner(text[],text[],text[],text[],text[]) line 62 at FOR over EXECUTE statement
    #             SQL function "runtests" statement 1
    #             SQL function "runtests" statement 1
not ok 5 - whatever.testplpgsqldie
# Failed test 5: "whatever.testplpgsqldie"
    # Subtest: whatever.testthis()
    ok 1 - setup
    ok 2 - Should be nothing in the test table
    ok 3 - setup more
    ok 4 - simple pass
    ok 5 - another simple pass
    ok 6 - teardown
    ok 7 - teardown more
    1..7
ok 6 - whatever.testthis
    # Subtest: whatever.testy()
    ok 1 - setup
    ok 2 - Should be nothing in the test table
    ok 3 - setup more
    not ok 4 - this test intentionally fails
    # Failed test 4: "this test intentionally fails"
    ok 5 - teardown
    ok 6 - teardown more
    1..6
    # Looks like you failed 1 test of 6
not ok 7 - whatever.testy
# Failed test 7: "whatever.testy"
    # Subtest: whatever.testz()
    ok 1 - setup
    ok 2 - Should be nothing in the test table
    ok 3 - setup more
    ok 4 - Late test should find nothing in the test table
    ok 5 - teardown
    ok 6 - teardown more
    1..6
ok 8 - whatever.testz
ok 9 - shutting down
ok 10 - shutting down more
1..10
# Looks like you failed 2 tests of 10
ok 1 - starting up
ok 2 - starting up some more
    # Subtest: whatever."test ident"()
    ok 1 - setup
    ok 2 - Should be nothing in the test table
    ok 3 - setup more
    ok 4 - ident
    ok 5 - ident 2
    ok 6 - teardown
    ok 7 - teardown more
    1..7
ok 3 - whatever."test ident"
    # Subtest: whatever.testplpgsql()
    ok 1 - setup
    ok 2 - Should be nothing in the test table
    ok 3 - setup more
    ok 4 - plpgsql simple
    ok 5 - plpgsql simple 2
    ok 6 - Should be a 1 in the test table
    ok 7 - teardown
    ok 8 - teardown more
    1..8
ok 4 - whatever.testplpgsql
    # Subtest: whatever.testplpgsqldie()
    ok 1 - setup
    ok 2 - Should be nothing in the test table
    ok 3 - setup more
    # Test died: P0001: This test should die, but not halt execution.
    # Note that in some cases we get what appears to be a duplicate context message, but that is due to Postgres itself.
    #         DETAIL:     DETAIL
    #         SCHEMA:     SCHEMA
    #         TABLE:      TABLE
    #         COLUMN:     COLUMN
    #         CONSTRAINT: CONSTRAINT
    #         TYPE:       TYPE
    #         CONTEXT:
    #             PL/pgSQL function __die() line 3 at RAISE
    #             SQL statement "SELECT __die();"
    #             PL/pgSQL function whatever.testplpgsqldie() line 23 at EXECUTE
    #             PL/pgSQL function _runner(text[],text[],text[],text[],text[]) line 62 at FOR over EXECUTE statement
    #             SQL function "runtests" statement 1
not ok 5 - whatever.testplpgsqldie
# Failed test 5: "whatever.testplpgsqldie"
    # Subtest: whatever.testthis()
    ok 1 - setup
    ok 2 - Should be nothing in the test table
    ok 3 - setup more
    ok 4 - simple pass
    ok 5 - another simple pass
    ok 6 - teardown
    ok 7 - teardown more
    1..7
ok 6 - whatever.testthis
    # Subtest: whatever.testy()
    ok 1 - setup
    ok 2 - Should be nothing in the test table
    ok 3 - setup more
    not ok 4 - this test intentionally fails
    # Failed test 4: "this test intentionally fails"
    ok 5 - teardown
    ok 6 - teardown more
    1..6
    # Looks like you failed 1 test of 6
not ok 7 - whatever.testy
# Failed test 7: "whatever.testy"
    # Subtest: whatever.testz()
    ok 1 - setup
    ok 2 - Should be nothing in the test table
    ok 3 - setup more
    ok 4 - Late test should find nothing in the test table
    ok 5 - teardown
    ok 6 - teardown more
    1..6
ok 8 - whatever.testz
ok 9 - shutting down
ok 10 - shutting down more
1..10
# Looks like you failed 2 tests of 10
